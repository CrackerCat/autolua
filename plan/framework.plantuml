@startuml framework

class LuaError
{
    +LuaError(Throwable throwable);
    +LuaError(String message);
}

interface Callback
{
    +void onCompleted(Object[] result);
    +void onError(LuaError error);
}

interface AutoLuaEngine
{
    + Object[] execute(byte[] code,String chunkName);
    + Object[] executeFile(String path);
    + void execute(byte[] code,String chunkName,Callback callback);
    + void executeFile(String path,Callback callback);
    + void register(String key,Object o);
    + void register(String key,Class clazz);
    + boolean isRunning();
    + void reset();
    + void interrupt();
}

class AutoLuaEngineImplement
{

}

interface JavaObjectWrapperFactory
{
    +JavaObjectWrapper getObjectWrapper(Object object,Class clazz);
}

interface JavaObjectWrapperCatch
{
    +void push(long id,JavaObjectWrapper);
    +void remove(long id);
}


class LuaJava
{
    -static HashMap<Long,JavaObjectWrapperFactory> factorys;

    +static long newLuaState(JavaObjectWrapperCatch catch,JavaObjectWrapperFactory factory);
    +static closeLuaState();
    +static Object toJavaObject(long nativeLua,int index, Class clazz)
    +static void push(long nativeLua, Class clazz,Object object);
    +static void register(long nativeLua,String key,Object object);
    +static Object[] execute(long nativeLua, byte[] code,String chunkName);
    +static Object[] executeFile(long nativeLua,String path);

}

interface JavaObjectWrapper
{
    + void callMethod(long nativeLua,String methodName);
    + void getField(long nativeLua);
    + void setField(long nativeLua);
}

LuaJava ..> JavaObjectWrapperCatch
LuaJava o-- JavaObjectWrapperFactory
LuaJava <-- AutoLuaEngineImplement

JavaObjectWrapperCatch o-- JavaObjectWrapper



AutoLuaEngineImplement -- JavaObjectWrapperFactory


AutoLuaEngine --> LuaError

AutoLuaEngine ..> Callback
AutoLuaEngine <|.. AutoLuaEngineImplement


@enduml